// Generated by dia2code
#ifndef STATE__GAMESTATE__H
#define STATE__GAMESTATE__H

#include <vector>
#include <memory>
#include <string>

namespace state {
  class Map;
  class Player;
}

#include "StateID.h"
#include "Map.h"
#include "Player.h"

namespace state {

  /// class GameState - 
  class GameState {
    // Associations
    // Attributes
  public:
    StateID state;
    Map map;
    /// 
/* current_player is necessary to create the attribute "players" with dia. Indeed a vector of a shared_ptr on a class T correspond to 3 level of encapsulation. Dia can only see 2 levels of encapulation.
Therefore an instance is created when the class constructor is called so I change the type to pointer.*/
    Player* current_player;
    std::vector<std::shared_ptr<Player>> players;
    std::vector<std::shared_ptr<Characters>> characters;
    // Operations
  public:
    GameState ();
    void new_map (unsigned const int width = 0, unsigned const int height = 0);
    void new_player (const std::string name);
    unsigned int get_number_of_player () const;
    std::shared_ptr<Player>& get_player (unsigned int i);
    const Map& get_map () const;
    void set_characters_range (unsigned int range);
    const std::vector<std::shared_ptr<Characters>>& get_characters () const;
    // Setters and Getters
  };

};

#endif
