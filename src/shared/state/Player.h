// Generated by dia2code
#ifndef STATE__PLAYER__H
#define STATE__PLAYER__H

#include <string>
#include <memory>
#include <vector>

namespace state {
  class Characters;
}

#include "Characters.h"

namespace state {

  /// class Player - 
  class Player {
    // Associations
    // Attributes
  public:
    std::string name;
  private:
    static unsigned int characters_range;
    /// necessary to create the attribute "characters" with dia. Indeed a vector of a shared_ptr on a class T correspond to 3 level of encapsulation. Dia can only see 2 levels of encapulation.
    std::shared_ptr<Characters> current_character;
    std::vector<std::shared_ptr<Characters>> characters;
    // Operations
  public:
    Player ();
    ~Player ();
    Player (std::string name);
    void new_character (std::string name);
    void add_character (std::shared_ptr<Characters>& character);
    std::shared_ptr<Characters>& get_character (unsigned int i);
    void select_character (unsigned int character_index);
    unsigned int get_number_of_characters () const;
    static void set_characters_range (unsigned int range);
    friend std::ostream& operator << (std::ostream& flux, Player const& player);
    // Setters and Getters
  };

};

#endif
